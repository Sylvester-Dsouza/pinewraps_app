workflows:
  android-workflow:
    name: Android Release
    instance_type: mac_mini_m1
    environment:
      vars:
        # Android signing
        FCI_KEYSTORE_PATH: /tmp/keystore.keystore
        FCI_KEYSTORE: ${ANDROID_KEYSTORE}
        FCI_KEYSTORE_PASSWORD: ${ANDROID_KEYSTORE_PASSWORD}
        FCI_KEY_ALIAS: ${ANDROID_KEY_ALIAS}
        FCI_KEY_PASSWORD: ${ANDROID_KEY_PASSWORD}
        # Flutter version management
        FLUTTER_ROOT: ${FLUTTER_ROOT}
      flutter: stable
      xcode: latest
      cocoapods: default
    triggering:
      events:
        - push
        - tag
      branch_patterns:
        - pattern: 'main'
          include: true
        - pattern: 'master'
          include: true
        - pattern: 'release*'
          include: true
    scripts:
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$FLUTTER_ROOT" > "$CM_BUILD_DIR/android/local.properties"
      - name: Set up keystore
        script: |
          echo $FCI_KEYSTORE | base64 --decode > $FCI_KEYSTORE_PATH
          # Create key.properties file
          cat >> "$CM_BUILD_DIR/android/key.properties" << EOF
          storePassword=$FCI_KEYSTORE_PASSWORD
          keyPassword=$FCI_KEY_PASSWORD
          keyAlias=$FCI_KEY_ALIAS
          storeFile=$FCI_KEYSTORE_PATH
          EOF
      - name: Get Flutter packages
        script: |
          flutter packages pub get
      - name: Fix fluttertoast plugin compatibility issues
        script: |
          # Create fix script
          cat > fix_fluttertoast.sh << 'EOL'
          #!/bin/bash

          # Script to fix fluttertoast plugin compatibility issues
          # This script patches the fluttertoast plugin files to work with newer Flutter versions

          # Find the fluttertoast plugin directory
          FLUTTERTOAST_DIR=$(find ~/.pub-cache/hosted/pub.dev -name "fluttertoast-*" -type d | sort -V | tail -n 1)

          if [ -z "$FLUTTERTOAST_DIR" ]; then
            echo "Fluttertoast plugin directory not found"
            exit 1
          fi

          echo "Fixing fluttertoast plugin in: $FLUTTERTOAST_DIR"

          # Path to the kotlin files
          PLUGIN_FILE="$FLUTTERTOAST_DIR/android/src/main/kotlin/io/github/ponnamkarthik/toast/fluttertoast/FlutterToastPlugin.kt"
          HANDLER_FILE="$FLUTTERTOAST_DIR/android/src/main/kotlin/io/github/ponnamkarthik/toast/fluttertoast/MethodCallHandlerImpl.kt"

          # Check if files exist
          if [ ! -f "$PLUGIN_FILE" ] || [ ! -f "$HANDLER_FILE" ]; then
            echo "Plugin files not found"
            exit 1
          fi

          # Fix FlutterToastPlugin.kt
          echo "Patching FlutterToastPlugin.kt..."
          sed -i -e 's/import io.flutter.plugin.common.PluginRegistry.Registrar/import io.flutter.embedding.engine.plugins.FlutterPlugin/' "$PLUGIN_FILE"
          sed -i -e '/fun registerWith(registrar: Registrar)/,/}/d' "$PLUGIN_FILE"

          # Fix MethodCallHandlerImpl.kt
          echo "Patching MethodCallHandlerImpl.kt..."
          sed -i -e 's/import io.flutter.view.FlutterMain/import io.flutter.FlutterInjector/' "$HANDLER_FILE"
          sed -i -e 's/FlutterMain.getLookupKeyForAsset/FlutterInjector.instance().flutterLoader().getLookupKeyForAsset/g' "$HANDLER_FILE"

          echo "Fluttertoast plugin patched successfully"
          EOL

          chmod +x fix_fluttertoast.sh
          ./fix_fluttertoast.sh
      - name: Fix Kotlin version warning
        script: |
          # Update Kotlin version in build.gradle
          sed -i -e 's/ext.kotlin_version = "1.7.10"/ext.kotlin_version = "1.8.10"/' "$CM_BUILD_DIR/android/build.gradle"
      - name: Flutter analyze
        script: |
          flutter analyze
      - name: Build AAB
        script: |
          flutter build appbundle --release
      - name: Build APK for distribution
        script: |
          flutter build apk --release --split-per-abi
    artifacts:
      - build/app/outputs/bundle/release/app-release.aab
      - build/app/outputs/flutter-apk/*-release.apk
    publishing:
      email:
        recipients:
          - ${NOTIFICATION_EMAIL}
      google_play:
        credentials: ${GCLOUD_SERVICE_ACCOUNT_CREDENTIALS}
        track: internal  # Can be internal, alpha, beta, production
        submit_as_draft: true

  ios-workflow:
    name: iOS Release
    instance_type: mac_mini_m1
    environment:
      vars:
        # iOS signing
        APP_STORE_CONNECT_ISSUER_ID: ${APP_STORE_CONNECT_ISSUER_ID}
        APP_STORE_CONNECT_KEY_IDENTIFIER: ${APP_STORE_CONNECT_KEY_IDENTIFIER}
        APP_STORE_CONNECT_PRIVATE_KEY: ${APP_STORE_CONNECT_PRIVATE_KEY}
        BUNDLE_ID: "com.pinewraps.app"
        # Flutter version management
        FLUTTER_ROOT: ${FLUTTER_ROOT}
      flutter: stable
      xcode: latest
      cocoapods: default
    triggering:
      events:
        - push
        - tag
      branch_patterns:
        - pattern: 'main'
          include: true
        - pattern: 'master'
          include: true
        - pattern: 'release*'
          include: true
    scripts:
      - name: Set up code signing settings on Xcode project
        script: |
          # Let Codemagic handle certificate management
          echo "Setting up code signing with Codemagic's automatic certificate management"
          # Use Codemagic CLI tools for automatic code signing
          app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
          keychain add-certificates
          xcode-project use-profiles
      - name: Get Flutter packages
        script: |
          flutter packages pub get
      - name: Install pods
        script: |
          find . -name "Podfile" -execdir pod install \;
      - name: Flutter analyze
        script: |
          flutter analyze
      - name: Flutter build ipa
        script: |
          flutter build ipa --release
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - ${NOTIFICATION_EMAIL}
      app_store_connect:
        auth: api_key
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        private_key: $APP_STORE_CONNECT_PRIVATE_KEY
        submit_to_testflight: true
        submit_to_app_store: false
