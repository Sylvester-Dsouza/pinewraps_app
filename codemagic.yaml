workflows:
  ios-workflow:
    name: iOS Workflow
    instance_type: mac_mini_m1
    environment:
      xcode: latest
      cocoapods: default
      flutter: stable
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.pinewraps.app
      vars:
        IOS_BUNDLE_ID: "com.pinewraps.app"
        APP_STORE_CONNECT_ISSUER_ID: ${APP_STORE_CONNECT_ISSUER_ID}
        APP_STORE_CONNECT_KEY_IDENTIFIER: ${APP_STORE_CONNECT_KEY_IDENTIFIER}
        APP_STORE_CONNECT_PRIVATE_KEY: ${APP_STORE_CONNECT_PRIVATE_KEY}
    scripts:
      - name: Set up code signing
        script: |
          echo "Setting up code signing for iOS"
          # Initialize keychain
          keychain initialize
          
          # Use App Store Connect API for code signing
          if [ -n "${APP_STORE_CONNECT_ISSUER_ID}" ] && [ -n "${APP_STORE_CONNECT_KEY_IDENTIFIER}" ] && [ -n "${APP_STORE_CONNECT_PRIVATE_KEY}" ]; then
            echo "Using App Store Connect API for code signing"
            
            # Create a temporary file for the private key
            PRIVATE_KEY_PATH=$(mktemp)
            echo "${APP_STORE_CONNECT_PRIVATE_KEY}" > "${PRIVATE_KEY_PATH}"
            
            # Check if bundle ID exists
            echo "Checking if bundle ID exists..."
            app-store-connect bundle-ids --issuer-id "${APP_STORE_CONNECT_ISSUER_ID}" --key-id "${APP_STORE_CONNECT_KEY_IDENTIFIER}" --private-key "${PRIVATE_KEY_PATH}" | grep -q "${IOS_BUNDLE_ID}"
            
            # If bundle ID doesn't exist, create it
            if [ $? -ne 0 ]; then
              echo "Creating bundle ID..."
              app-store-connect create-bundle-id --issuer-id "${APP_STORE_CONNECT_ISSUER_ID}" --key-id "${APP_STORE_CONNECT_KEY_IDENTIFIER}" --private-key "${PRIVATE_KEY_PATH}" --name "Pinewraps" --platform IOS "${IOS_BUNDLE_ID}"
            else
              echo "Bundle ID already exists"
            fi
            
            # Create keychain
            echo "Creating keychain"
            keychain_name="ios-build.keychain"
            keychain_password="temporary_password"
            security create-keychain -p "$keychain_password" "$keychain_name"
            security list-keychains -d user -s "$keychain_name" $(security list-keychains -d user | sed s/\"//g)
            security default-keychain -s "$keychain_name"
            security unlock-keychain -p "$keychain_password" "$keychain_name"
            security set-keychain-settings
            
            # Fetch or create the development signing files
            echo "Fetching or creating development signing files..."
            app-store-connect fetch-signing-files com.pinewraps.app \
              --type IOS_APP_DEVELOPMENT \
              --create \
              --save-keychain-password "$keychain_password" \
              --keychain "$keychain_name"
            
            # Fetch or create the distribution signing files
            echo "Fetching or creating distribution signing files..."
            app-store-connect fetch-signing-files com.pinewraps.app \
              --type IOS_APP_STORE \
              --create \
              --save-keychain-password "$keychain_password" \
              --keychain "$keychain_name"
            
            # Clean up the temporary file
            rm "${PRIVATE_KEY_PATH}"
            
            # Check if the profiles were created successfully
            if [ $? -eq 0 ]; then
              echo "Successfully set up code signing with App Store Connect API"
              
              # List available certificates
              echo "Available certificates:"
              security find-identity -v -p codesigning
              
              # List available provisioning profiles
              echo "Available provisioning profiles:"
              ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
            else
              echo "Failed to fetch or create provisioning profile. Please check your App Store Connect API credentials."
              echo "Make sure your Apple Developer account has the necessary permissions."
              exit 1
            fi
          else
            echo "Error: App Store Connect API credentials not found. Cannot proceed with code signing."
            exit 1
          fi
          
      - name: Set up Firebase configuration
        script: |
          echo "Setting up Firebase configuration"
          mkdir -p "${FCI_BUILD_DIR}/ios/Runner"
          # Create the file manually from the known content
          cat > "${FCI_BUILD_DIR}/ios/Runner/GoogleService-Info.plist" << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CLIENT_ID</key>
            <string>181991178384-0768pbr5j4b0svq374ql8jmqm8lha5gi.apps.googleusercontent.com</string>
            <key>REVERSED_CLIENT_ID</key>
            <string>com.googleusercontent.apps.181991178384-0768pbr5j4b0svq374ql8jmqm8lha5gi</string>
            <key>ANDROID_CLIENT_ID</key>
            <string>181991178384-egso4atj877ghd4c2tgiv9rg2c15715o.apps.googleusercontent.com</string>
            <key>API_KEY</key>
            <string>AIzaSyAacRdIMeUJyGAUeEj8Qb2bliZ-tySRCj8</string>
            <key>GCM_SENDER_ID</key>
            <string>181991178384</string>
            <key>PLIST_VERSION</key>
            <string>1</string>
            <key>BUNDLE_ID</key>
            <string>com.pinewraps.app</string>
            <key>PROJECT_ID</key>
            <string>pinewraps-23e8a</string>
            <key>STORAGE_BUCKET</key>
            <string>pinewraps-23e8a.firebasestorage.app</string>
            <key>IS_ADS_ENABLED</key>
            <false></false>
            <key>IS_ANALYTICS_ENABLED</key>
            <false></false>
            <key>IS_APPINVITE_ENABLED</key>
            <true></true>
            <key>IS_GCM_ENABLED</key>
            <true></true>
            <key>IS_SIGNIN_ENABLED</key>
            <true></true>
            <key>GOOGLE_APP_ID</key>
            <string>1:181991178384:ios:a5699293807394f7485815</string>
          </dict>
          </plist>
          EOF
          echo "Created GoogleService-Info.plist manually"
          
      - name: Run iOS prebuild script
        script: |
          echo "Running iOS prebuild script"
          chmod +x "${FCI_BUILD_DIR}/ios_prebuild.sh"
          "${FCI_BUILD_DIR}/ios_prebuild.sh"
          
      - name: Flutter build iOS
        script: |
          cd "$FCI_BUILD_DIR"
          
          # Make the build script executable
          chmod +x ios/build_ios.sh
          
          # Run the build script
          ./ios/build_ios.sh
          
      - name: Create IPA
        script: |
          cd "$FCI_BUILD_DIR"
          
          # Check if the archive exists
          if [ -d "$FCI_BUILD_DIR/build/ios/archive/Runner.xcarchive" ]; then
            echo "Archive exists, proceeding with export"
            
            # Create the export directory
            mkdir -p "$FCI_BUILD_DIR/build/ios/ipa"
            
            # Export the IPA
            xcodebuild -exportArchive \
              -archivePath "$FCI_BUILD_DIR/build/ios/archive/Runner.xcarchive" \
              -exportOptionsPlist "$FCI_BUILD_DIR/ios/exportOptions.plist" \
              -exportPath "$FCI_BUILD_DIR/build/ios/ipa" \
              -allowProvisioningUpdates
            
            # Verify IPA was created
            if [ -d "$FCI_BUILD_DIR/build/ios/ipa" ]; then
              echo "IPA created successfully:"
              ls -la "$FCI_BUILD_DIR/build/ios/ipa"
            else
              echo "Failed to create IPA"
              exit 1
            fi
          else
            echo "Archive not found at path $FCI_BUILD_DIR/build/ios/archive/Runner.xcarchive"
            echo "Listing contents of build directory:"
            find "$FCI_BUILD_DIR/build" -type d | sort
            exit 1
          fi
    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/xcarchive/*.xcarchive
      
  android-workflow:
    name: Android Workflow
    instance_type: mac_mini_m1
    environment:
      flutter: stable
    scripts:
      - name: Set up keystore
        script: |
          echo "Setting up Android keystore"
          if [ -n "${ANDROID_KEYSTORE}" ]; then
            # Check if the variable is valid base64
            if echo "${ANDROID_KEYSTORE}" | base64 -d > /dev/null 2>&1; then
              echo "Decoding Android keystore"
              echo "${ANDROID_KEYSTORE}" | base64 --decode > "${FCI_BUILD_DIR}/keystore.jks"
              echo "Keystore file created successfully"
              
              # Create key.properties file if all required variables are set
              if [ -n "${ANDROID_KEYSTORE_PASSWORD}" ] && [ -n "${ANDROID_KEY_ALIAS}" ] && [ -n "${ANDROID_KEY_PASSWORD}" ]; then
                echo "Creating key.properties file"
                mkdir -p "${FCI_BUILD_DIR}/android"
                cat >> "${FCI_BUILD_DIR}/android/key.properties" << EOF
                storeFile=${FCI_BUILD_DIR}/keystore.jks
                storePassword=${ANDROID_KEYSTORE_PASSWORD}
                keyAlias=${ANDROID_KEY_ALIAS}
                keyPassword=${ANDROID_KEY_PASSWORD}
                EOF
                echo "key.properties file created successfully"
              else
                echo "Warning: Missing Android keystore credentials. key.properties file not created."
              fi
            else
              echo "Warning: ANDROID_KEYSTORE is not valid base64. Keystore not created."
            fi
          else
            echo "ANDROID_KEYSTORE not set. Skipping keystore setup."
          fi
          
          # Set up Firebase configuration if needed
          if [ -n "${ANDROID_FIREBASE_CONFIG}" ]; then
            echo "Setting up Android Firebase configuration"
            mkdir -p "${FCI_BUILD_DIR}/android/app"
            # Check if the variable is valid base64
            if echo "${ANDROID_FIREBASE_CONFIG}" | base64 -d > /dev/null 2>&1; then
              echo "Decoding Android Firebase configuration"
              echo "${ANDROID_FIREBASE_CONFIG}" | base64 --decode > "${FCI_BUILD_DIR}/android/app/google-services.json"
              echo "Android Firebase configuration file created successfully"
            else
              echo "Warning: ANDROID_FIREBASE_CONFIG is not valid base64. Skipping Firebase configuration."
            fi
          else
            echo "ANDROID_FIREBASE_CONFIG not set. Skipping Firebase configuration."
          fi
          
      - name: Flutter build APK and AppBundle
        script: |
          cd "${FCI_BUILD_DIR}"
          # Uncomment the following line if you need to build a specific flavor
          # flutter build apk --release --flavor production
          flutter build apk --release
          flutter build appbundle --release
    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - build/app/outputs/bundle/release/*.aab
      
  combined-workflow:
    name: iOS and Android Build
    instance_type: mac_mini_m1
    environment:
      xcode: latest
      cocoapods: default
      flutter: stable
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.pinewraps.app
      vars:
        IOS_BUNDLE_ID: "com.pinewraps.app"
        APP_STORE_CONNECT_ISSUER_ID: ${APP_STORE_CONNECT_ISSUER_ID}
        APP_STORE_CONNECT_KEY_IDENTIFIER: ${APP_STORE_CONNECT_KEY_IDENTIFIER}
        APP_STORE_CONNECT_PRIVATE_KEY: ${APP_STORE_CONNECT_PRIVATE_KEY}
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: master
          include: true
    scripts:
      # iOS setup and build
      - name: Set up code signing settings on Xcode project
        script: |
          cd "$FCI_BUILD_DIR"
          
          # Create keychain
          echo "Creating keychain"
          keychain_name="ios-build.keychain"
          keychain_password="temporary_password"
          security create-keychain -p "$keychain_password" "$keychain_name"
          security list-keychains -d user -s "$keychain_name" $(security list-keychains -d user | sed s/\"//g)
          security default-keychain -s "$keychain_name"
          security unlock-keychain -p "$keychain_password" "$keychain_name"
          security set-keychain-settings
          
          # Use app-store-connect to fetch signing files
          echo "Fetching signing files"
          app-store-connect fetch-signing-files com.pinewraps.app \
            --type IOS_APP_STORE \
            --create \
            --save-keychain-password "$keychain_password" \
            --keychain "$keychain_name"
          
          # Set up code signing settings on Xcode project
          echo "Setting up code signing settings on Xcode project"
          xcode-project use-profiles --project ios/Runner.xcodeproj
          
      - name: Set up iOS Firebase configuration
        script: |
          echo "Setting up iOS Firebase configuration"
          mkdir -p "${FCI_BUILD_DIR}/ios/Runner"
          # Create the file manually from the known content
          cat > "${FCI_BUILD_DIR}/ios/Runner/GoogleService-Info.plist" << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CLIENT_ID</key>
            <string>181991178384-0768pbr5j4b0svq374ql8jmqm8lha5gi.apps.googleusercontent.com</string>
            <key>REVERSED_CLIENT_ID</key>
            <string>com.googleusercontent.apps.181991178384-0768pbr5j4b0svq374ql8jmqm8lha5gi</string>
            <key>ANDROID_CLIENT_ID</key>
            <string>181991178384-egso4atj877ghd4c2tgiv9rg2c15715o.apps.googleusercontent.com</string>
            <key>API_KEY</key>
            <string>AIzaSyAacRdIMeUJyGAUeEj8Qb2bliZ-tySRCj8</string>
            <key>GCM_SENDER_ID</key>
            <string>181991178384</string>
            <key>PLIST_VERSION</key>
            <string>1</string>
            <key>BUNDLE_ID</key>
            <string>com.pinewraps.app</string>
            <key>PROJECT_ID</key>
            <string>pinewraps-23e8a</string>
            <key>STORAGE_BUCKET</key>
            <string>pinewraps-23e8a.firebasestorage.app</string>
            <key>IS_ADS_ENABLED</key>
            <false></false>
            <key>IS_ANALYTICS_ENABLED</key>
            <false></false>
            <key>IS_APPINVITE_ENABLED</key>
            <true></true>
            <key>IS_GCM_ENABLED</key>
            <true></true>
            <key>IS_SIGNIN_ENABLED</key>
            <true></true>
            <key>GOOGLE_APP_ID</key>
            <string>1:181991178384:ios:a5699293807394f7485815</string>
          </dict>
          </plist>
          EOF
          echo "Created GoogleService-Info.plist manually"
          
      - name: Run iOS prebuild script
        script: |
          echo "Running iOS prebuild script"
          chmod +x "${FCI_BUILD_DIR}/ios_prebuild.sh"
          "${FCI_BUILD_DIR}/ios_prebuild.sh"
          
      - name: Flutter build iOS
        script: |
          cd "$FCI_BUILD_DIR"
          
          # Make the build script executable
          chmod +x ios/build_ios.sh
          
          # Run the build script
          ./ios/build_ios.sh
          
      - name: Create iOS IPA
        script: |
          cd "$FCI_BUILD_DIR"
          
          # Check if the archive exists
          if [ -d "$FCI_BUILD_DIR/build/ios/archive/Runner.xcarchive" ]; then
            echo "Archive exists, proceeding with export"
            
            # Create the export directory
            mkdir -p "$FCI_BUILD_DIR/build/ios/ipa"
            
            # Export the IPA
            xcodebuild -exportArchive \
              -archivePath "$FCI_BUILD_DIR/build/ios/archive/Runner.xcarchive" \
              -exportOptionsPlist "$FCI_BUILD_DIR/ios/exportOptions.plist" \
              -exportPath "$FCI_BUILD_DIR/build/ios/ipa" \
              -allowProvisioningUpdates
            
            # Verify IPA was created
            if [ -d "$FCI_BUILD_DIR/build/ios/ipa" ]; then
              echo "IPA created successfully:"
              ls -la "$FCI_BUILD_DIR/build/ios/ipa"
            else
              echo "Failed to create IPA"
              exit 1
            fi
          else
            echo "Archive not found at path $FCI_BUILD_DIR/build/ios/archive/Runner.xcarchive"
            echo "Listing contents of build directory:"
            find "$FCI_BUILD_DIR/build" -type d | sort
            exit 1
          fi
          
      # Android setup and build
      - name: Set up Android keystore
        script: |
          echo "Setting up Android keystore"
          if [ -n "${ANDROID_KEYSTORE}" ]; then
            # Check if the variable is valid base64
            if echo "${ANDROID_KEYSTORE}" | base64 -d > /dev/null 2>&1; then
              echo "Decoding Android keystore"
              echo "${ANDROID_KEYSTORE}" | base64 --decode > "${FCI_BUILD_DIR}/keystore.jks"
              echo "Keystore file created successfully"
              
              # Create key.properties file if all required variables are set
              if [ -n "${ANDROID_KEYSTORE_PASSWORD}" ] && [ -n "${ANDROID_KEY_ALIAS}" ] && [ -n "${ANDROID_KEY_PASSWORD}" ]; then
                echo "Creating key.properties file"
                mkdir -p "${FCI_BUILD_DIR}/android"
                cat >> "${FCI_BUILD_DIR}/android/key.properties" << EOF
                storeFile=${FCI_BUILD_DIR}/keystore.jks
                storePassword=${ANDROID_KEYSTORE_PASSWORD}
                keyAlias=${ANDROID_KEY_ALIAS}
                keyPassword=${ANDROID_KEY_PASSWORD}
                EOF
                echo "key.properties file created successfully"
              else
                echo "Warning: Missing Android keystore credentials. key.properties file not created."
              fi
            else
              echo "Warning: ANDROID_KEYSTORE is not valid base64. Keystore not created."
            fi
          else
            echo "ANDROID_KEYSTORE not set. Skipping keystore setup."
          fi
          
          # Set up Firebase configuration if needed
          if [ -n "${ANDROID_FIREBASE_CONFIG}" ]; then
            echo "Setting up Android Firebase configuration"
            mkdir -p "${FCI_BUILD_DIR}/android/app"
            # Check if the variable is valid base64
            if echo "${ANDROID_FIREBASE_CONFIG}" | base64 -d > /dev/null 2>&1; then
              echo "Decoding Android Firebase configuration"
              echo "${ANDROID_FIREBASE_CONFIG}" | base64 --decode > "${FCI_BUILD_DIR}/android/app/google-services.json"
              echo "Android Firebase configuration file created successfully"
            else
              echo "Warning: ANDROID_FIREBASE_CONFIG is not valid base64. Skipping Firebase configuration."
            fi
          else
            echo "ANDROID_FIREBASE_CONFIG not set. Skipping Firebase configuration."
          fi
          
      - name: Flutter build Android
        script: |
          cd "${FCI_BUILD_DIR}"
          flutter build apk --release
          flutter build appbundle --release
    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/xcarchive/*.xcarchive
      - build/app/outputs/flutter-apk/*.apk
      - build/app/outputs/bundle/release/*.aab
    publishing:
      email:
        recipients:
          - sylvester@pinewraps.com
        notify:
          success: true
          failure: true
