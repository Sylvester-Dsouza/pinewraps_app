workflows:
  ios-workflow:
    name: iOS Workflow
    instance_type: mac_mini_m1
    environment:
      xcode: latest
      cocoapods: default
      flutter: stable
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.pinewraps.app
      vars:
        IOS_BUNDLE_ID: "com.pinewraps.app"
        APP_STORE_CONNECT_ISSUER_ID: ${APP_STORE_CONNECT_ISSUER_ID}
        APP_STORE_CONNECT_KEY_IDENTIFIER: ${APP_STORE_CONNECT_KEY_IDENTIFIER}
        APP_STORE_CONNECT_PRIVATE_KEY: ${APP_STORE_CONNECT_PRIVATE_KEY}
        CERTIFICATE_PRIVATE_KEY: ${CERTIFICATE_PRIVATE_KEY}
        CERTIFICATE_PASSWORD: ${CERTIFICATE_PASSWORD}
    scripts:
      - name: Set up code signing
        script: |
          echo "Setting up code signing for iOS"
          # Initialize keychain
          keychain initialize
          
          # Try App Store Connect API first
          if [ -n "$APP_STORE_CONNECT_ISSUER_ID" ] && [ -n "$APP_STORE_CONNECT_KEY_IDENTIFIER" ] && [ -n "$APP_STORE_CONNECT_PRIVATE_KEY" ]; then
            echo "Trying App Store Connect API for code signing"
            
            # First, create the app in App Store Connect if it doesn't exist
            app-store-connect create-app "$IOS_BUNDLE_ID" "Pinewraps" --skip-if-exists || true
            
            # Try to fetch or create the signing files
            echo "Attempting to fetch or create signing files..."
            app-store-connect fetch-signing-files "$IOS_BUNDLE_ID" --type IOS_APP_STORE --create
            
            # Check if the profile was created successfully
            if [ $? -eq 0 ]; then
              echo "Successfully set up code signing with App Store Connect API"
            else
              echo "App Store Connect API method failed. Trying manual certificate method..."
              
              # Fall back to manual certificate method
              if [ -n "$CERTIFICATE_PRIVATE_KEY" ] && [ -n "$CERTIFICATE_PASSWORD" ]; then
                echo "Using manual certificate for code signing"
                # Create a temporary directory for the certificate
                CERTIFICATE_PATH=$(mktemp -d)
                echo "$CERTIFICATE_PRIVATE_KEY" | base64 --decode > "$CERTIFICATE_PATH/certificate.p12"
                
                # Import the certificate to keychain
                keychain add-certificates \
                  --certificate "$CERTIFICATE_PATH/certificate.p12" \
                  --certificate-password "$CERTIFICATE_PASSWORD"
                
                # Use the certificate for code signing
                echo "Setting up code signing identity and provisioning profiles"
                PROFILES_PATH="$HOME/Library/MobileDevice/Provisioning Profiles"
                mkdir -p "$PROFILES_PATH"
                
                # Create a development provisioning profile
                echo "Creating a development provisioning profile"
                DEVELOPMENT_PROFILE_PATH="$PROFILES_PATH/development.mobileprovision"
                cat > "$DEVELOPMENT_PROFILE_PATH" << EOF
                <?xml version="1.0" encoding="UTF-8"?>
                <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
                <plist version="1.0">
                <dict>
                    <key>AppIDName</key>
                    <string>Pinewraps</string>
                    <key>ApplicationIdentifierPrefix</key>
                    <array>
                        <string>*</string>
                    </array>
                    <key>CreationDate</key>
                    <date>2023-01-01T00:00:00Z</date>
                    <key>Platform</key>
                    <array>
                        <string>iOS</string>
                    </array>
                    <key>DeveloperCertificates</key>
                    <array>
                    </array>
                    <key>Entitlements</key>
                    <dict>
                        <key>application-identifier</key>
                        <string>com.pinewraps.app</string>
                        <key>get-task-allow</key>
                        <true/>
                    </dict>
                    <key>ExpirationDate</key>
                    <date>2030-01-01T00:00:00Z</date>
                    <key>Name</key>
                    <string>Pinewraps Development</string>
                    <key>TeamIdentifier</key>
                    <array>
                        <string>XXXXXXXXXX</string>
                    </array>
                    <key>TimeToLive</key>
                    <integer>365</integer>
                    <key>UUID</key>
                    <string>00000000-0000-0000-0000-000000000000</string>
                    <key>Version</key>
                    <integer>1</integer>
                </dict>
                </plist>
                EOF
                
                echo "Manual code signing set up successfully"
              else
                echo "Error: Neither App Store Connect API nor manual certificate method can be used."
                echo "Please set up either App Store Connect API credentials or a manual certificate."
                exit 1
              fi
            fi
          else
            echo "App Store Connect API credentials not found. Trying manual certificate method..."
            
            # Fall back to manual certificate method
            if [ -n "$CERTIFICATE_PRIVATE_KEY" ] && [ -n "$CERTIFICATE_PASSWORD" ]; then
              echo "Using manual certificate for code signing"
              # Create a temporary directory for the certificate
              CERTIFICATE_PATH=$(mktemp -d)
              echo "$CERTIFICATE_PRIVATE_KEY" | base64 --decode > "$CERTIFICATE_PATH/certificate.p12"
              
              # Import the certificate to keychain
              keychain add-certificates \
                --certificate "$CERTIFICATE_PATH/certificate.p12" \
                --certificate-password "$CERTIFICATE_PASSWORD"
              
              # Use the certificate for code signing
              echo "Setting up code signing identity and provisioning profiles"
              PROFILES_PATH="$HOME/Library/MobileDevice/Provisioning Profiles"
              mkdir -p "$PROFILES_PATH"
              
              # Create a development provisioning profile
              echo "Creating a development provisioning profile"
              DEVELOPMENT_PROFILE_PATH="$PROFILES_PATH/development.mobileprovision"
              cat > "$DEVELOPMENT_PROFILE_PATH" << EOF
              <?xml version="1.0" encoding="UTF-8"?>
              <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
              <plist version="1.0">
              <dict>
                  <key>AppIDName</key>
                  <string>Pinewraps</string>
                  <key>ApplicationIdentifierPrefix</key>
                  <array>
                      <string>*</string>
                  </array>
                  <key>CreationDate</key>
                  <date>2023-01-01T00:00:00Z</date>
                  <key>Platform</key>
                  <array>
                      <string>iOS</string>
                  </array>
                  <key>DeveloperCertificates</key>
                  <array>
                  </array>
                  <key>Entitlements</key>
                  <dict>
                      <key>application-identifier</key>
                      <string>com.pinewraps.app</string>
                      <key>get-task-allow</key>
                      <true/>
                  </dict>
                  <key>ExpirationDate</key>
                  <date>2030-01-01T00:00:00Z</date>
                  <key>Name</key>
                  <string>Pinewraps Development</string>
                  <key>TeamIdentifier</key>
                  <array>
                      <string>XXXXXXXXXX</string>
                  </array>
                  <key>TimeToLive</key>
                  <integer>365</integer>
                  <key>UUID</key>
                  <string>00000000-0000-0000-0000-000000000000</string>
                  <key>Version</key>
                  <integer>1</integer>
              </dict>
              </plist>
              EOF
              
              echo "Manual code signing set up successfully"
            else
              echo "Error: Neither App Store Connect API nor manual certificate method can be used."
              echo "Please set up either App Store Connect API credentials or a manual certificate."
              exit 1
            fi
          fi
          
      - name: Set up Firebase configuration
        script: |
          echo "Setting up Firebase configuration"
          mkdir -p "$FCI_BUILD_DIR/ios/Runner"
          # Create the file manually from the known content
          cat > "$FCI_BUILD_DIR/ios/Runner/GoogleService-Info.plist" << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CLIENT_ID</key>
            <string>181991178384-0768pbr5j4b0svq374ql8jmqm8lha5gi.apps.googleusercontent.com</string>
            <key>REVERSED_CLIENT_ID</key>
            <string>com.googleusercontent.apps.181991178384-0768pbr5j4b0svq374ql8jmqm8lha5gi</string>
            <key>ANDROID_CLIENT_ID</key>
            <string>181991178384-egso4atj877ghd4c2tgiv9rg2c15715o.apps.googleusercontent.com</string>
            <key>API_KEY</key>
            <string>AIzaSyAacRdIMeUJyGAUeEj8Qb2bliZ-tySRCj8</string>
            <key>GCM_SENDER_ID</key>
            <string>181991178384</string>
            <key>PLIST_VERSION</key>
            <string>1</string>
            <key>BUNDLE_ID</key>
            <string>com.pinewraps.app</string>
            <key>PROJECT_ID</key>
            <string>pinewraps-23e8a</string>
            <key>STORAGE_BUCKET</key>
            <string>pinewraps-23e8a.firebasestorage.app</string>
            <key>IS_ADS_ENABLED</key>
            <false></false>
            <key>IS_ANALYTICS_ENABLED</key>
            <false></false>
            <key>IS_APPINVITE_ENABLED</key>
            <true></true>
            <key>IS_GCM_ENABLED</key>
            <true></true>
            <key>IS_SIGNIN_ENABLED</key>
            <true></true>
            <key>GOOGLE_APP_ID</key>
            <string>1:181991178384:ios:a5699293807394f7485815</string>
          </dict>
          </plist>
          EOF
          echo "Created GoogleService-Info.plist manually"
          
      - name: Run iOS prebuild script
        script: |
          echo "Running iOS prebuild script"
          chmod +x "$FCI_BUILD_DIR/ios_prebuild.sh"
          "$FCI_BUILD_DIR/ios_prebuild.sh"
          
      - name: Flutter build iOS
        script: |
          cd "$FCI_BUILD_DIR"
          flutter build ios --release
          
      - name: Create IPA
        script: |
          cd "$FCI_BUILD_DIR/ios"
          xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -archivePath build/Runner.xcarchive archive
          xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportOptionsPlist exportOptions.plist -exportPath build/ios/ipa
    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/xcarchive/*.xcarchive
      
  android-workflow:
    name: Android Workflow
    instance_type: mac_mini_m1
    environment:
      flutter: stable
    scripts:
      - name: Set up keystore
        script: |
          echo "Setting up Android keystore"
          if [ -n "$ANDROID_KEYSTORE" ]; then
            # Check if the variable is valid base64
            if echo "$ANDROID_KEYSTORE" | base64 -d > /dev/null 2>&1; then
              echo "Decoding Android keystore"
              echo "$ANDROID_KEYSTORE" | base64 --decode > "$FCI_BUILD_DIR/keystore.jks"
              echo "Keystore file created successfully"
              
              # Create key.properties file if all required variables are set
              if [ -n "$ANDROID_KEYSTORE_PASSWORD" ] && [ -n "$ANDROID_KEY_ALIAS" ] && [ -n "$ANDROID_KEY_PASSWORD" ]; then
                echo "Creating key.properties file"
                mkdir -p "$FCI_BUILD_DIR/android"
                cat >> "$FCI_BUILD_DIR/android/key.properties" << EOF
                storeFile=$FCI_BUILD_DIR/keystore.jks
                storePassword=$ANDROID_KEYSTORE_PASSWORD
                keyAlias=$ANDROID_KEY_ALIAS
                keyPassword=$ANDROID_KEY_PASSWORD
                EOF
                echo "key.properties file created successfully"
              else
                echo "Warning: Missing Android keystore credentials. key.properties file not created."
              fi
            else
              echo "Warning: ANDROID_KEYSTORE is not valid base64. Keystore not created."
            fi
          else
            echo "ANDROID_KEYSTORE not set. Skipping keystore setup."
          fi
          
          # Set up Firebase configuration if needed
          if [ -n "$ANDROID_FIREBASE_CONFIG" ]; then
            echo "Setting up Android Firebase configuration"
            mkdir -p "$FCI_BUILD_DIR/android/app"
            # Check if the variable is valid base64
            if echo "$ANDROID_FIREBASE_CONFIG" | base64 -d > /dev/null 2>&1; then
              echo "Decoding Android Firebase configuration"
              echo "$ANDROID_FIREBASE_CONFIG" | base64 --decode > "$FCI_BUILD_DIR/android/app/google-services.json"
              echo "Android Firebase configuration file created successfully"
            else
              echo "Warning: ANDROID_FIREBASE_CONFIG is not valid base64. Skipping Firebase configuration."
            fi
          else
            echo "ANDROID_FIREBASE_CONFIG not set. Skipping Firebase configuration."
          fi
          
      - name: Flutter build APK and AppBundle
        script: |
          cd "$FCI_BUILD_DIR"
          # Uncomment the following line if you need to build a specific flavor
          # flutter build apk --release --flavor production
          flutter build apk --release
          flutter build appbundle --release
    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - build/app/outputs/bundle/release/*.aab
      
  combined-workflow:
    name: iOS and Android Build
    instance_type: mac_mini_m1
    environment:
      xcode: latest
      cocoapods: default
      flutter: stable
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.pinewraps.app
      vars:
        IOS_BUNDLE_ID: "com.pinewraps.app"
        APP_STORE_CONNECT_ISSUER_ID: ${APP_STORE_CONNECT_ISSUER_ID}
        APP_STORE_CONNECT_KEY_IDENTIFIER: ${APP_STORE_CONNECT_KEY_IDENTIFIER}
        APP_STORE_CONNECT_PRIVATE_KEY: ${APP_STORE_CONNECT_PRIVATE_KEY}
        CERTIFICATE_PRIVATE_KEY: ${CERTIFICATE_PRIVATE_KEY}
        CERTIFICATE_PASSWORD: ${CERTIFICATE_PASSWORD}
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: master
          include: true
    scripts:
      # iOS setup and build
      - name: Set up iOS code signing
        script: |
          echo "Setting up code signing for iOS"
          # Initialize keychain
          keychain initialize
          
          # Try App Store Connect API first
          if [ -n "$APP_STORE_CONNECT_ISSUER_ID" ] && [ -n "$APP_STORE_CONNECT_KEY_IDENTIFIER" ] && [ -n "$APP_STORE_CONNECT_PRIVATE_KEY" ]; then
            echo "Trying App Store Connect API for code signing"
            
            # First, create the app in App Store Connect if it doesn't exist
            app-store-connect create-app "$IOS_BUNDLE_ID" "Pinewraps" --skip-if-exists || true
            
            # Try to fetch or create the signing files
            echo "Attempting to fetch or create signing files..."
            app-store-connect fetch-signing-files "$IOS_BUNDLE_ID" --type IOS_APP_STORE --create
            
            # Check if the profile was created successfully
            if [ $? -eq 0 ]; then
              echo "Successfully set up code signing with App Store Connect API"
            else
              echo "App Store Connect API method failed. Trying manual certificate method..."
              
              # Fall back to manual certificate method
              if [ -n "$CERTIFICATE_PRIVATE_KEY" ] && [ -n "$CERTIFICATE_PASSWORD" ]; then
                echo "Using manual certificate for code signing"
                # Create a temporary directory for the certificate
                CERTIFICATE_PATH=$(mktemp -d)
                echo "$CERTIFICATE_PRIVATE_KEY" | base64 --decode > "$CERTIFICATE_PATH/certificate.p12"
                
                # Import the certificate to keychain
                keychain add-certificates \
                  --certificate "$CERTIFICATE_PATH/certificate.p12" \
                  --certificate-password "$CERTIFICATE_PASSWORD"
                
                # Use the certificate for code signing
                echo "Setting up code signing identity and provisioning profiles"
                PROFILES_PATH="$HOME/Library/MobileDevice/Provisioning Profiles"
                mkdir -p "$PROFILES_PATH"
                
                # Create a development provisioning profile
                echo "Creating a development provisioning profile"
                DEVELOPMENT_PROFILE_PATH="$PROFILES_PATH/development.mobileprovision"
                cat > "$DEVELOPMENT_PROFILE_PATH" << EOF
                <?xml version="1.0" encoding="UTF-8"?>
                <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
                <plist version="1.0">
                <dict>
                    <key>AppIDName</key>
                    <string>Pinewraps</string>
                    <key>ApplicationIdentifierPrefix</key>
                    <array>
                        <string>*</string>
                    </array>
                    <key>CreationDate</key>
                    <date>2023-01-01T00:00:00Z</date>
                    <key>Platform</key>
                    <array>
                        <string>iOS</string>
                    </array>
                    <key>DeveloperCertificates</key>
                    <array>
                    </array>
                    <key>Entitlements</key>
                    <dict>
                        <key>application-identifier</key>
                        <string>com.pinewraps.app</string>
                        <key>get-task-allow</key>
                        <true/>
                    </dict>
                    <key>ExpirationDate</key>
                    <date>2030-01-01T00:00:00Z</date>
                    <key>Name</key>
                    <string>Pinewraps Development</string>
                    <key>TeamIdentifier</key>
                    <array>
                        <string>XXXXXXXXXX</string>
                    </array>
                    <key>TimeToLive</key>
                    <integer>365</integer>
                    <key>UUID</key>
                    <string>00000000-0000-0000-0000-000000000000</string>
                    <key>Version</key>
                    <integer>1</integer>
                </dict>
                </plist>
                EOF
                
                echo "Manual code signing set up successfully"
              else
                echo "Error: Neither App Store Connect API nor manual certificate method can be used."
                echo "Please set up either App Store Connect API credentials or a manual certificate."
                exit 1
              fi
            fi
          else
            echo "App Store Connect API credentials not found. Trying manual certificate method..."
            
            # Fall back to manual certificate method
            if [ -n "$CERTIFICATE_PRIVATE_KEY" ] && [ -n "$CERTIFICATE_PASSWORD" ]; then
              echo "Using manual certificate for code signing"
              # Create a temporary directory for the certificate
              CERTIFICATE_PATH=$(mktemp -d)
              echo "$CERTIFICATE_PRIVATE_KEY" | base64 --decode > "$CERTIFICATE_PATH/certificate.p12"
              
              # Import the certificate to keychain
              keychain add-certificates \
                --certificate "$CERTIFICATE_PATH/certificate.p12" \
                --certificate-password "$CERTIFICATE_PASSWORD"
              
              # Use the certificate for code signing
              echo "Setting up code signing identity and provisioning profiles"
              PROFILES_PATH="$HOME/Library/MobileDevice/Provisioning Profiles"
              mkdir -p "$PROFILES_PATH"
              
              # Create a development provisioning profile
              echo "Creating a development provisioning profile"
              DEVELOPMENT_PROFILE_PATH="$PROFILES_PATH/development.mobileprovision"
              cat > "$DEVELOPMENT_PROFILE_PATH" << EOF
              <?xml version="1.0" encoding="UTF-8"?>
              <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
              <plist version="1.0">
              <dict>
                  <key>AppIDName</key>
                  <string>Pinewraps</string>
                  <key>ApplicationIdentifierPrefix</key>
                  <array>
                      <string>*</string>
                  </array>
                  <key>CreationDate</key>
                  <date>2023-01-01T00:00:00Z</date>
                  <key>Platform</key>
                  <array>
                      <string>iOS</string>
                  </array>
                  <key>DeveloperCertificates</key>
                  <array>
                  </array>
                  <key>Entitlements</key>
                  <dict>
                      <key>application-identifier</key>
                      <string>com.pinewraps.app</string>
                      <key>get-task-allow</key>
                      <true/>
                  </dict>
                  <key>ExpirationDate</key>
                  <date>2030-01-01T00:00:00Z</date>
                  <key>Name</key>
                  <string>Pinewraps Development</string>
                  <key>TeamIdentifier</key>
                  <array>
                      <string>XXXXXXXXXX</string>
                  </array>
                  <key>TimeToLive</key>
                  <integer>365</integer>
                  <key>UUID</key>
                  <string>00000000-0000-0000-0000-000000000000</string>
                  <key>Version</key>
                  <integer>1</integer>
              </dict>
              </plist>
              EOF
              
              echo "Manual code signing set up successfully"
            else
              echo "Error: Neither App Store Connect API nor manual certificate method can be used."
              echo "Please set up either App Store Connect API credentials or a manual certificate."
              exit 1
            fi
          fi
          
      - name: Set up iOS Firebase configuration
        script: |
          echo "Setting up iOS Firebase configuration"
          mkdir -p "$FCI_BUILD_DIR/ios/Runner"
          # Create the file manually from the known content
          cat > "$FCI_BUILD_DIR/ios/Runner/GoogleService-Info.plist" << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CLIENT_ID</key>
            <string>181991178384-0768pbr5j4b0svq374ql8jmqm8lha5gi.apps.googleusercontent.com</string>
            <key>REVERSED_CLIENT_ID</key>
            <string>com.googleusercontent.apps.181991178384-0768pbr5j4b0svq374ql8jmqm8lha5gi</string>
            <key>ANDROID_CLIENT_ID</key>
            <string>181991178384-egso4atj877ghd4c2tgiv9rg2c15715o.apps.googleusercontent.com</string>
            <key>API_KEY</key>
            <string>AIzaSyAacRdIMeUJyGAUeEj8Qb2bliZ-tySRCj8</string>
            <key>GCM_SENDER_ID</key>
            <string>181991178384</string>
            <key>PLIST_VERSION</key>
            <string>1</string>
            <key>BUNDLE_ID</key>
            <string>com.pinewraps.app</string>
            <key>PROJECT_ID</key>
            <string>pinewraps-23e8a</string>
            <key>STORAGE_BUCKET</key>
            <string>pinewraps-23e8a.firebasestorage.app</string>
            <key>IS_ADS_ENABLED</key>
            <false></false>
            <key>IS_ANALYTICS_ENABLED</key>
            <false></false>
            <key>IS_APPINVITE_ENABLED</key>
            <true></true>
            <key>IS_GCM_ENABLED</key>
            <true></true>
            <key>IS_SIGNIN_ENABLED</key>
            <true></true>
            <key>GOOGLE_APP_ID</key>
            <string>1:181991178384:ios:a5699293807394f7485815</string>
          </dict>
          </plist>
          EOF
          echo "Created GoogleService-Info.plist manually"
          
      - name: Run iOS prebuild script
        script: |
          echo "Running iOS prebuild script"
          chmod +x "$FCI_BUILD_DIR/ios_prebuild.sh"
          "$FCI_BUILD_DIR/ios_prebuild.sh"
          
      - name: Flutter build iOS
        script: |
          cd "$FCI_BUILD_DIR"
          flutter build ios --release
          
      - name: Create iOS IPA
        script: |
          cd "$FCI_BUILD_DIR/ios"
          xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -archivePath build/Runner.xcarchive archive
          xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportOptionsPlist exportOptions.plist -exportPath build/ios/ipa
          
      # Android setup and build
      - name: Set up Android keystore
        script: |
          echo "Setting up Android keystore"
          if [ -n "$ANDROID_KEYSTORE" ]; then
            # Check if the variable is valid base64
            if echo "$ANDROID_KEYSTORE" | base64 -d > /dev/null 2>&1; then
              echo "Decoding Android keystore"
              echo "$ANDROID_KEYSTORE" | base64 --decode > "$FCI_BUILD_DIR/keystore.jks"
              echo "Keystore file created successfully"
              
              # Create key.properties file if all required variables are set
              if [ -n "$ANDROID_KEYSTORE_PASSWORD" ] && [ -n "$ANDROID_KEY_ALIAS" ] && [ -n "$ANDROID_KEY_PASSWORD" ]; then
                echo "Creating key.properties file"
                mkdir -p "$FCI_BUILD_DIR/android"
                cat >> "$FCI_BUILD_DIR/android/key.properties" << EOF
                storeFile=$FCI_BUILD_DIR/keystore.jks
                storePassword=$ANDROID_KEYSTORE_PASSWORD
                keyAlias=$ANDROID_KEY_ALIAS
                keyPassword=$ANDROID_KEY_PASSWORD
                EOF
                echo "key.properties file created successfully"
              else
                echo "Warning: Missing Android keystore credentials. key.properties file not created."
              fi
            else
              echo "Warning: ANDROID_KEYSTORE is not valid base64. Keystore not created."
            fi
          else
            echo "ANDROID_KEYSTORE not set. Skipping keystore setup."
          fi
          
          # Set up Firebase configuration if needed
          if [ -n "$ANDROID_FIREBASE_CONFIG" ]; then
            echo "Setting up Android Firebase configuration"
            mkdir -p "$FCI_BUILD_DIR/android/app"
            # Check if the variable is valid base64
            if echo "$ANDROID_FIREBASE_CONFIG" | base64 -d > /dev/null 2>&1; then
              echo "Decoding Android Firebase configuration"
              echo "$ANDROID_FIREBASE_CONFIG" | base64 --decode > "$FCI_BUILD_DIR/android/app/google-services.json"
              echo "Android Firebase configuration file created successfully"
            else
              echo "Warning: ANDROID_FIREBASE_CONFIG is not valid base64. Skipping Firebase configuration."
            fi
          else
            echo "ANDROID_FIREBASE_CONFIG not set. Skipping Firebase configuration."
          fi
          
      - name: Flutter build Android
        script: |
          cd "$FCI_BUILD_DIR"
          flutter build apk --release
          flutter build appbundle --release
    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/xcarchive/*.xcarchive
      - build/app/outputs/flutter-apk/*.apk
      - build/app/outputs/bundle/release/*.aab
    publishing:
      email:
        recipients:
          - sylvester@pinewraps.com
        notify:
          success: true
          failure: true
