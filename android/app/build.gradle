plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

// Load key.properties file if it exists for signing
def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.pinewraps.app"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += ["-Xjvm-default=all"]
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.pinewraps.app"
        minSdkVersion 23
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutter.versionCode.toInteger()
        versionName flutter.versionName
    }

    buildFeatures {
        buildConfig true
    }

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('debug.keystore')
            storePassword 'android'
        }
        release {
            if (keystoreProperties.containsKey('keyAlias')) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source "../.."
}

// Ensure APK and AAB are properly generated and copied to Flutter output directory
tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease' || task.name == 'assembleDebug') {
        task.doLast {
            // Create the Flutter output directory if it doesn't exist
            def flutterOutputDir = new File("${rootProject.projectDir}/../build/app/outputs/flutter-apk/")
            if (!flutterOutputDir.exists()) {
                flutterOutputDir.mkdirs()
            }
            
            // Copy the APK to the Flutter output directory
            def buildType = task.name.contains('Release') ? 'release' : 'debug'
            def sourceApk = new File("${buildDir}/outputs/apk/${buildType}/app-${buildType}.apk")
            if (sourceApk.exists()) {
                def targetApk = new File("${rootProject.projectDir}/../build/app/outputs/flutter-apk/app-${buildType}.apk")
                targetApk.bytes = sourceApk.bytes
                println "Copied ${sourceApk.path} to ${targetApk.path}"
            } else {
                println "Warning: ${sourceApk.path} does not exist"
            }
        }
    }
    
    // Handle AAB generation for Play Console
    if (task.name == 'bundleRelease') {
        task.doLast {
            // Create the Flutter output directory for AAB if it doesn't exist
            def flutterOutputDir = new File("${rootProject.projectDir}/../build/app/outputs/bundle/release/")
            if (!flutterOutputDir.exists()) {
                flutterOutputDir.mkdirs()
            }
            
            // Copy the AAB to the Flutter output directory
            def sourceAab = new File("${buildDir}/outputs/bundle/release/app-release.aab")
            if (sourceAab.exists()) {
                def targetAab = new File("${rootProject.projectDir}/../build/app/outputs/bundle/release/app-release.aab")
                targetAab.bytes = sourceAab.bytes
                println "Copied ${sourceAab.path} to ${targetAab.path}"
            } else {
                println "Warning: ${sourceAab.path} does not exist"
            }
        }
    }
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:32.7.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.android.gms:play-services-auth:20.7.0'
    implementation 'com.google.android.play:core-common:2.0.3'
    implementation 'com.google.android.play:app-update:2.1.0'
}

// This task runs after the build is complete and copies the APK to where Flutter expects it
tasks.register('copyApkToFlutterDir') {
    doLast {
        def possibleSourceApks = [
            "${buildDir}/outputs/flutter-apk/app-debug.apk",
            "${buildDir}/outputs/apk/debug/app-debug.apk",
            "${buildDir}/outputs/apk/release/app-release.apk",
            "${buildDir}/outputs/flutter-apk/app-release.apk"
        ]
        def targetDir = "${rootProject.projectDir}/../build/app/outputs/flutter-apk/"
        
        // Create target directory if it doesn't exist
        def targetDirFile = new File(targetDir)
        if (!targetDirFile.exists()) {
            targetDirFile.mkdirs()
        }
        
        // Try to find and copy the APK file
        boolean found = false
        for (String sourceApk : possibleSourceApks) {
            def sourceFile = new File(sourceApk)
            if (sourceFile.exists()) {
                copy {
                    from sourceApk
                    into targetDir
                }
                println "APK copied from ${sourceApk} to ${targetDir}"
                found = true
                break
            }
        }
        
        if (!found) {
            println "Warning: Could not find source APK in any of the expected locations"
        }
    }
}

// Make sure the copy task runs after assembleDebug
tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug') {
        task.finalizedBy(tasks.named('copyApkToFlutterDir'))
    }
}
