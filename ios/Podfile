platform :ios, '12.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

# Define all Firebase related pods
$firebase_pods = [
  'Firebase',
  'FirebaseCore',
  'FirebaseCoreDiagnostics',
  'FirebaseCoreInternal',
  'FirebaseInstallations',
  'FirebaseMessaging',
  'firebase_core',
  'firebase_messaging',
  'GoogleDataTransport',
  'GoogleUtilities',
  'nanopb'
]

target 'Runner' do
  # Do NOT use dynamic frameworks for Firebase to avoid header issues
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    target.build_configurations.each do |config|
      # iOS deployment target
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
      
      # Xcode build settings
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      
      # Swift specific settings
      config.build_settings['SWIFT_VERSION'] = '5.0'
      config.build_settings['SWIFT_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
      config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
      
      # Allow non-modular includes for ALL targets to fix Firebase header issues
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      
      # Add framework dependencies for all targets
      config.build_settings['OTHER_LDFLAGS'] ||= '$(inherited)'
      config.build_settings['OTHER_LDFLAGS'] += ' -framework UIKit'
      config.build_settings['OTHER_LDFLAGS'] += ' -framework CoreTelephony' 
      config.build_settings['OTHER_LDFLAGS'] += ' -framework Foundation'
      
      # More permissive settings for Firebase modules
      if $firebase_pods.any? { |firebase_pod| target.name.include?(firebase_pod) }
        config.build_settings['APPLICATION_EXTENSION_API_ONLY'] = 'NO'
        config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
        config.build_settings['DEFINES_MODULE'] = 'YES'
        
        # Fix header search paths for Firebase
        config.build_settings['HEADER_SEARCH_PATHS'] ||= '$(inherited)'
        config.build_settings['HEADER_SEARCH_PATHS'] += ' "${PODS_ROOT}/Headers/Public"'
        config.build_settings['HEADER_SEARCH_PATHS'] += ' "${PODS_ROOT}/Headers/Private"'
        config.build_settings['HEADER_SEARCH_PATHS'] += ' "${PODS_ROOT}/Headers/Private/Firebase"'
        config.build_settings['HEADER_SEARCH_PATHS'] += ' "${PODS_ROOT}/Headers/Public/Firebase"'
        
        # Add ObjC flag for Firebase
        config.build_settings['OTHER_LDFLAGS'] += ' -ObjC'
        
        # Disable modular headers for Firebase
        config.build_settings['CLANG_MODULES_AUTOLINK'] = 'NO'
      end
      
      # Swift optimization
      if config.name == 'Debug'
        config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
        config.build_settings['SWIFT_COMPILATION_MODE'] = 'singlefile'
      else
        config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-O'
        config.build_settings['SWIFT_COMPILATION_MODE'] = 'wholemodule'
      end
    end
  end

  # Fix Xcode 15 code signing
  installer.generated_projects.each do |project|
    project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['CODE_SIGN_IDENTITY'] = ''
        config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
        config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
      end
    end
  end
end
