platform :ios, '12.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    # In CI environment, we might need to create this file
    if ENV['CI'] || ENV['FCI_BUILD_DIR']
      # Create a minimal Generated.xcconfig file
      File.open(generated_xcode_build_settings_path, 'w') do |file|
        file.puts "FLUTTER_ROOT=#{ENV['FLUTTER_ROOT'] || `which flutter`.chomp.gsub('/bin/flutter', '')}"
        file.puts "FLUTTER_APPLICATION_PATH=#{File.absolute_path(File.join('..', '..'))}"
        file.puts "COCOAPODS_PARALLEL_CODE_SIGN=true"
        file.puts "FLUTTER_TARGET=lib/main.dart"
        file.puts "FLUTTER_BUILD_DIR=build"
        file.puts "FLUTTER_BUILD_NAME=1.0.0"
        file.puts "FLUTTER_BUILD_NUMBER=1"
        file.puts "EXCLUDED_ARCHS[sdk=iphonesimulator*]=i386 arm64"
        file.puts "DART_OBFUSCATION=false"
        file.puts "TRACK_WIDGET_CREATION=true"
        file.puts "TREE_SHAKE_ICONS=false"
        file.puts "PACKAGE_CONFIG=#{File.absolute_path(File.join('..', '..', '.dart_tool', 'package_config.json'))}"
      end
    else
      raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
    end
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  
  # If we can't find it in the file, try to get it from the environment or flutter command
  if ENV['FLUTTER_ROOT']
    return ENV['FLUTTER_ROOT']
  else
    flutter_path = `which flutter`.chomp
    if flutter_path && !flutter_path.empty?
      return flutter_path.gsub('/bin/flutter', '')
    end
  end
  
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path} or environment. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks! :linkage => :static
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

# Fix for pre-install hook - use generated_projects instead of pods_project
pre_install do |installer|
  installer.generated_projects.each do |project|
    project.targets.each do |target|
      flutter_additional_ios_build_settings(target)
      
      # Handle privacy bundles
      if target.name.end_with?('_privacy') || target.name.end_with?('-privacy') || target.name.include?('Privacy')
        target.build_configurations.each do |config|
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = ['*']
          config.build_settings['SKIP_INSTALL'] = 'YES'
        end
      end
    end
  end
end

# Remove privacy bundles after installation
post_install do |installer|
  # Apply flutter post-install
  flutter_post_install(installer) if defined?(flutter_post_install)
  
  # Set build settings for all targets
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      # Ensure minimum iOS version
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
      
      # Disable code signing for pods
      config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
      config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
      config.build_settings['CODE_SIGN_IDENTITY'] = ''
      
      # Explicitly exclude privacy bundles from build
      if target.name.end_with?('_privacy') || target.name.end_with?('-privacy') || target.name.include?('Privacy')
        config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = ['*']
        config.build_settings['SKIP_INSTALL'] = 'YES'
        config.build_settings['ENABLE_BITCODE'] = 'NO'
        config.build_settings['SWIFT_VERSION'] = nil
        config.build_settings['MACH_O_TYPE'] = 'mh_bundle'
        config.build_settings['EMBEDDED_CONTENT_CONTAINS_SWIFT'] = 'NO'
        config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'NO'
        config.build_settings['COPY_PHASE_STRIP'] = 'YES'
        config.build_settings['STRIP_INSTALLED_PRODUCT'] = 'YES'
      end
      
      # Add arm64 exclusion for simulators
      config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64"
      
      # Disable user script sandboxing (for Xcode 15)
      config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
    end
  end
  
  # Fix for Xcode 15 resource bundle issue
  installer.aggregate_targets.each do |target|
    target.xcconfigs.each do |variant, xcconfig|
      xcconfig_path = target.client_root + target.xcconfig_relative_path(variant)
      IO.write(xcconfig_path, IO.read(xcconfig_path).gsub("DT_TOOLCHAIN_DIR", "TOOLCHAIN_DIR")) rescue nil
    end
  end
  
  # Remove privacy bundles physically - do this at the very end
  begin
    privacy_bundles = Dir.glob("#{installer.sandbox.root}/**/*_privacy.bundle") + 
                      Dir.glob("#{installer.sandbox.root}/**/*-privacy.bundle") + 
                      Dir.glob("#{installer.sandbox.root}/**/*Privacy.bundle")
    
    privacy_bundles.each do |bundle|
      puts "Removing privacy bundle: #{bundle}"
      FileUtils.rm_rf(bundle) if File.directory?(bundle)
    end
  rescue => e
    puts "Warning: Error removing privacy bundles: #{e.message}"
  end
end
