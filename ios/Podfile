# Uncomment this line to define a global platform for your project
platform :ios, '12.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  
  # Firebase dependencies with modular headers
  pod 'Firebase', :modular_headers => true
  pod 'FirebaseCore', :modular_headers => true
  pod 'FirebaseMessaging', :modular_headers => true
  pod 'GoogleUtilities', :modular_headers => true
  pod 'GoogleDataTransport', :modular_headers => true
  
  post_install do |installer|
    installer.pods_project.targets.each do |target|
      flutter_additional_ios_build_settings(target)
      
      # Add SQLite flags to sqflite targets
      if ['sqflite', 'sqflite_darwin'].include?(target.name)
        target.build_configurations.each do |config|
          # Add SQLite flags
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SQLITE_ENABLE_COLUMN_METADATA=1'
          
          # Add header search paths
          config.build_settings['HEADER_SEARCH_PATHS'] ||= ['$(inherited)']
          if target.name == 'sqflite'
            config.build_settings['HEADER_SEARCH_PATHS'] << '"${PODS_ROOT}/../.symlinks/plugins/sqflite/ios/Classes"'
          elsif target.name == 'sqflite_darwin'
            config.build_settings['HEADER_SEARCH_PATHS'] << '"${PODS_ROOT}/../.symlinks/plugins/sqflite_darwin/darwin/sqflite_darwin/Sources/sqflite_darwin"'
          end
          
          # Disable code signing for these targets
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
          config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
        end
      end
      
      # Fix open_file_ios issues if needed
      if target.name == 'open_file_ios'
        target.build_configurations.each do |config|
          # Ensure proper compiler flags
          config.build_settings['OTHER_LDFLAGS'] ||= ['$(inherited)']
          
          # Disable code signing for this target
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
          config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
        end
      end
      
      # Fix for all targets
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
        
        # Disable code signing for all pods to avoid issues
        if config.build_settings['WRAPPER_EXTENSION'] == 'bundle'
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
          config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
        end
        
        # Ensure Swift version is set for all targets
        if config.build_settings['SWIFT_VERSION'].nil?
          config.build_settings['SWIFT_VERSION'] = '5.0'
        end
      end
    end
  end
end

target 'RunnerTests' do
  inherit! :search_paths
end
